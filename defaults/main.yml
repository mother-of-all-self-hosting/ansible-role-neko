---
# Project source code URL: https://github.com/m1k1o/neko

neko_enabled: true
neko_identifier: neko

# renovate: datasource=docker depName=m1k1o/neko
neko_version: 'firefox'

neko_hostname: ''

neko_screen: '1920x1080@30'
neko_password: ''
neko_password_admin: ''
neko_epr: '52000-52100'
neko_icelite: '1'
neko_ipfetch: ''

neko_uid: ''
neko_gid: ''

neko_base_path: "/{{ neko_identifier }}"

neko_systemd_required_services_list: "{{ neko_systemd_required_services_list_default + neko_systemd_required_services_list_auto + neko_systemd_required_services_list_custom }}"
neko_systemd_required_services_list_default: ['docker.service']
neko_systemd_required_services_list_auto: []
neko_systemd_required_services_list_custom: []

neko_systemd_wanted_services_list: "{{ neko_systemd_wanted_services_list_default + neko_systemd_wanted_services_list_auto + neko_systemd_wanted_services_list_custom }}"
neko_systemd_wanted_services_list_default: []
neko_systemd_wanted_services_list_auto: []
neko_systemd_wanted_services_list_custom: []



neko_container_image: "{{ neko_container_image_registry_prefix }}m1k1o/neko:{{ neko_container_image_tag }}"
neko_container_image_registry_prefix: docker.io/
neko_container_image_tag: "{{ neko_version }}"
neko_container_image_force_pull: "{{ neko_container_image.endswith(':latest') }}"

neko_container_network: '{{ neko_identifier }}'

# The port number in the container
neko_container_http_port: 8080

# Controls whether the neko container exposes its HTTP port (as defined by `neko_container_http_port`).
#
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:8731"), or empty string to not expose.
neko_container_http_host_bind_port: ""

# A list of additional container networks that the container would be connected to.
# The role does not create these networks, so make sure they already exist.
# Use this to expose this container to a reverse proxy, which runs in a different container network.
neko_container_additional_networks: "{{ neko_container_additional_networks_auto + neko_container_additional_networks_custom }}"
neko_container_additional_networks_auto: []
neko_container_additional_networks_custom: []

# Additional environment variables to pass to the neko container.
# You can use this to further influence the default configuration.
#
# Example:
# neko_environment_variables_extension: |
#   neko_STORAGE_BACKEND=s3
#   neko_STORAGE_S3_ENDPOINT=minio:9000
#   neko_STORAGE_S3_BUCKET=something
#   neko_STORAGE_S3_SECRET_KEY=verysecret
neko_environment_variables_extension: ''

# neko_container_labels_traefik_enabled controls whether labels to assist a Traefik reverse-proxy will be attached to the container.
# See `roles/custom/neko_neko/templates/labels.j2` for details.
#
# To inject your own other container labels, see `neko_container_labels_additional_labels`.
neko_container_labels_traefik_enabled: false
neko_container_labels_traefik_docker_network: ""
neko_container_labels_traefik_entrypoints: web-secure
neko_container_labels_traefik_priority: 0
neko_container_labels_traefik_tls: "{{ neko_container_labels_traefik_entrypoints != 'web' }}"
neko_container_labels_traefik_tls_certResolver: default  # noqa var-naming

# Controls which additional headers to attach to all HTTP requests.
# To add your own custom request headers, use `neko_container_labels_traefik_additional_response_headers_custom`
neko_container_labels_traefik_additional_request_headers: "{{ neko_container_labels_traefik_additional_request_headers_auto | combine(neko_container_labels_traefik_additional_request_headers_custom) }}"
neko_container_labels_traefik_additional_request_headers_auto: {}
neko_container_labels_traefik_additional_request_headers_custom: {}


# Controls which additional headers to attach to all HTTP responses.
# To add your own custom response headers, use `neko_container_labels_traefik_additional_response_headers_custom`
neko_container_labels_traefik_additional_response_headers: "{{ neko_container_labels_traefik_additional_response_headers_auto | combine(neko_container_labels_traefik_additional_response_headers_custom) }}"
neko_container_labels_traefik_additional_response_headers_auto: |
  {{
    {}
    | combine ({'X-XSS-Protection': neko_http_header_xss_protection} if neko_http_header_xss_protection else {})
    | combine ({'X-Content-Type-Options': neko_http_header_content_type_options} if neko_http_header_content_type_options else {})
    | combine ({'Content-Security-Policy': neko_http_header_content_security_policy} if neko_http_header_content_security_policy else {})
    | combine ({'Permission-Policy': neko_http_header_content_permission_policy} if neko_http_header_content_permission_policy else {})
    | combine ({'Strict-Transport-Security': neko_http_header_strict_transport_security} if neko_http_header_strict_transport_security and neko_container_labels_traefik_tls else {})
  }}
neko_container_labels_traefik_additional_response_headers_custom: {}

# Specifies the value of the `X-XSS-Protection` header
# Stops pages from loading when they detect reflected cross-site scripting (XSS) attacks.
#
# Learn more about it is here:
# - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
# - https://portswigger.net/web-security/cross-site-scripting/reflected
neko_http_header_xss_protection: "1; mode=block"

# Specifies the value of the `X-Content-Type-Options` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
neko_http_header_content_type_options: nosniff

# Specifies the value of the `Content-Security-Policy` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
neko_http_header_content_security_policy: frame-ancestors 'self'

# Specifies the value of the `Permission-Policy` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permission-Policy
neko_http_header_content_permission_policy: "{{ 'interest-cohort=()' if neko_floc_optout_enabled else '' }}"

# Specifies the value of the `Strict-Transport-Security` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
neko_http_header_strict_transport_security: "max-age=31536000; includeSubDomains{{ '; preload' if neko_hsts_preload_enabled else '' }}"

# Controls whether to send a "Permissions-Policy interest-cohort=();" header along with all responses
#
# Learn more about what it is here:
# - https://www.eff.org/deeplinks/2021/03/googles-floc-terrible-idea
# - https://paramdeo.com/blog/opting-your-website-out-of-googles-floc-network
# - https://amifloced.org/
#
# Of course, a better solution is to just stop using browsers (like Chrome), which participate in such tracking practices.
# See: `neko_content_permission_policy`
neko_floc_optout_enabled: true

# Controls if HSTS preloading is enabled
#
# In its strongest and recommended form, the [HSTS policy](https://www.chromium.org/hsts) includes all subdomains, and
# indicates a willingness to be "preloaded" into browsers:
# `Strict-Transport-Security: max-age=31536000; includeSubDomains; preload`
# For more information visit:
# - https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
# - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
# - https://hstspreload.org/#opt-in
# See: `neko_http_header_strict_transport_security`
neko_hsts_preload_enabled: false


# neko_container_labels_additional_labels contains a multiline string with additional labels to add to the container label file.
# See `roles/custom/collabora_online/templates/labels.j2` for details.
#
# Example:
# neko_container_labels_additional_labels: |
#   my.label=1
#   another.label="here"
neko_container_labels_additional_labels: ''
